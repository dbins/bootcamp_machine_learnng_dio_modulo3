# -*- coding: utf-8 -*-
"""MODULO3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hdx3IzftkUXY0KK92V1yG3YlRLgh1bMp
"""



"""Utilizando o OpenCV para manipular imagens

"""

import cv2
from google.colab.patches import cv2_imshow

# Carregar a imagem colorida
imagem_colorida = cv2.imread('./Lenna.png')

# Converter para escala de cinza
imagem_cinza = cv2.cvtColor(imagem_colorida, cv2.COLOR_BGR2GRAY)

# Exibir a imagem em escala de cinza
cv2_imshow(imagem_cinza)

# Aplicar a limiarização para criar uma imagem binária
# O primeiro parâmetro é a imagem em escala de cinza
# O segundo parâmetro é o valor de limiar. Pixels com valor superior a isso serão brancos, os demais serão pretos.
# O terceiro parâmetro é o valor máximo que o pixel pode ter (geralmente 255 para branco)
cv2.threshold(imagem_cinza, 127, 255, cv2.THRESH_BINARY)
limiar, imagem_binaria = cv2.threshold(imagem_cinza, 127, 255, cv2.THRESH_BINARY)

# Salvar a imagem binária no disco
cv2.imwrite('opencv_imagem_cinza.jpg', imagem_cinza)
cv2.imwrite('opencv_imagem_binaria.jpg', imagem_binaria)

# Exibir a imagem binária
cv2_imshow(imagem_binaria)

"""Utilizando Pillow"""

#!pip install Pillow
from PIL import Image
import matplotlib.pyplot as plt

# Abrir a imagem
imagem = Image.open('./Lenna.png')

# Converter para escala de cinza
imagem_cinza = imagem.convert('L')

# Aplicar limiarização para obter a imagem binária
# Usamos o método point para aplicar o limiar em cada pixel
imagem_binaria = imagem_cinza.point(lambda p: p > 127 and 255)

# Exibir a imagem em tons de cinza
imagem_cinza.show()
# Exibir a imagem em tons de cinza usando matplotlib
plt.imshow(imagem_cinza, cmap='gray')
plt.axis('off')  # Remove eixos
plt.show()

# Exibir a imagem binária
imagem_binaria.show()
# Exibir a imagem binária usando matplotlib
plt.imshow(imagem_binaria, cmap='gray')
plt.axis('off')  # Remove eixos
plt.show()

# Salvar a imagem cinza no disco
imagem_cinza.save('pillow_imagem_cinza.jpg')

# Salvar a imagem binária no disco
imagem_binaria.save('pillow_imagem_binaria.jpg')

"""Utilizando scikit-image"""

from skimage import io, color
from skimage.filters import threshold_otsu
import matplotlib.pyplot as plt

# Carregar a imagem
imagem = io.imread('./Lenna.png')

# Converter para escala de cinza
imagem_cinza = color.rgb2gray(imagem)

# Aplicar limiarização de Otsu para binarização
limiar = threshold_otsu(imagem_cinza)
imagem_binaria = imagem_cinza > limiar

# Exibir a imagem em tons de cinza
plt.imshow(imagem_cinza, cmap='gray')
plt.axis('off')  # Remove eixos para visualização limpa
plt.show()

# Exibir a imagem binária
plt.imshow(imagem_binaria, cmap='gray')
plt.axis('off')  # Remove eixos para visualização limpa
plt.show()

# Salvar a imagem em escala de cinza no disco
io.imsave('scikit_imagem_cinza.jpg', (imagem_cinza * 255).astype('uint8'))

# Salvar a imagem binária no disco
io.imsave('scikit_imagem_binaria.jpg', (imagem_binaria * 255).astype('uint8'))